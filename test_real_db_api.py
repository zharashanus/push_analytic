#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
"""

import requests
import json

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:7778"

def test_health():
    """–¢–µ—Å—Ç health check endpoint"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º health check...")
    try:
        response = requests.get(f"{BASE_URL}/api/v1/health")
        print(f"Status: {response.status_code}")
        print(f"Response: {response.json()}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_random_client():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î...")
    
    try:
        response = requests.get(
            f"{BASE_URL}/api/v1/test/random-client",
            headers={"Content-Type": "application/json"}
        )
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç: {data['client_code']}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(data['recommendations'])}")
            
            for i, rec in enumerate(data['recommendations'], 1):
                print(f"\nüèÜ –¢–æ–ø-{i}: {rec['product']}")
                print(f"   –°–∫–æ—Ä: {rec['score']:.2f}")
                print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã–≥–æ–¥–∞: {rec['expected_benefit']:,.0f} ‚Ç∏")
                print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec['priority']}")
                print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {rec['push_notification']}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_specific_client(client_code):
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ {client_code} –∏–∑ –ë–î...")
    
    try:
        response = requests.get(
            f"{BASE_URL}/api/v1/test/random-client/{client_code}",
            headers={"Content-Type": "application/json"}
        )
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç: {data['client_code']}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(data['recommendations'])}")
            
            for i, rec in enumerate(data['recommendations'], 1):
                print(f"\nüèÜ –¢–æ–ø-{i}: {rec['product']}")
                print(f"   –°–∫–æ—Ä: {rec['score']:.2f}")
                print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã–≥–æ–¥–∞: {rec['expected_benefit']:,.0f} ‚Ç∏")
                print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec['priority']}")
                print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {rec['push_notification']}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_analyze_with_mock_data():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏...")
    
    test_data = {
        "client_code": 1,
        "name": "–†–∞–º–∞–∑–∞–Ω",
        "status": "–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç",
        "avg_monthly_balance_KZT": 240000,
        "city": "–ê–ª–º–∞—Ç—ã",
        "age": 30,
        "transactions": [
            {"date": "2025-08-10", "category": "–¢–∞–∫—Å–∏", "amount": 27400, "currency": "KZT"},
            {"date": "2025-08-12", "category": "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è", "amount": 44000, "currency": "KZT"}
        ],
        "transfers": [
            {"date": "2025-08-01", "type": "salary_in", "direction": "in", "amount": 320000, "currency": "KZT"}
        ]
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/v1/analyze/all",
            json=test_data,
            headers={"Content-Type": "application/json"}
        )
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {data['client_code']}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(data['recommendations'])}")
            
            for i, rec in enumerate(data['recommendations'], 1):
                print(f"\nüèÜ –¢–æ–ø-{i}: {rec['product']}")
                print(f"   –°–∫–æ—Ä: {rec['score']:.2f}")
                print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã–≥–æ–¥–∞: {rec['expected_benefit']:,.0f} ‚Ç∏")
                print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec['priority']}")
                print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {rec['push_notification']}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    print(f"Base URL: {BASE_URL}")
    
    tests = [
        ("Health Check", test_health),
        ("Mock Data Analysis", test_analyze_with_mock_data),
        ("Random Client Analysis", test_random_client),
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    import sys
    if len(sys.argv) > 1:
        try:
            client_code = int(sys.argv[1])
            tests.append((f"Specific Client {client_code}", lambda: test_specific_client(client_code)))
        except ValueError:
            print(f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞: {sys.argv[1]}")
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*60}")
        print(f"–¢–µ—Å—Ç: {test_name}")
        print('='*60)
        result = test_func()
        results.append((test_name, result))
    
    print(f"\n{'='*60}")
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í")
    print('='*60)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
    
    print(f"\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print(f"   python {__file__}                    # –¢–µ—Å—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
    print(f"   python {__file__} 12345             # –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")

if __name__ == "__main__":
    main()
