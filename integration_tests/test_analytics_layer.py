"""
–¢–µ—Å—Ç —Å–ª–æ—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import sys
import os
import unittest
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(__file__)), 'src'))

from database import db_manager
from analytics.transaction_analyzer import TransactionAnalyzer
from analytics.transfer_analyzer import TransferAnalyzer
from analytics.pattern_detector import PatternDetector


class TestAnalyticsLayer(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Å–ª–æ—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.transaction_analyzer = TransactionAnalyzer(db_manager)
        self.transfer_analyzer = TransferAnalyzer(db_manager)
        self.pattern_detector = PatternDetector(db_manager)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        clients = db_manager.get_clients(limit=1)
        if clients:
            self.test_client_code = clients[0]['client_code']
        else:
            self.test_client_code = None
    
    def test_transaction_analyzer(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        
        if not self.test_client_code:
            self.skipTest("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        analysis = self.transaction_analyzer.analyze_client_transactions(
            self.test_client_code, 90
        )
        
        self.assertIsNotNone(analysis, "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        self.assertIn('client_code', analysis, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ")
        self.assertIn('total_transactions', analysis, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        self.assertIn('total_amount', analysis, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—â–∞—è —Å—É–º–º–∞")
        
        print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {self.test_client_code}")
        print(f"   üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {analysis['total_transactions']}")
        print(f"   üí∞ –°—É–º–º–∞: {analysis['total_amount']:,.0f} ‚Ç∏")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ
        balance_info = self.transaction_analyzer.get_client_balance_info(self.test_client_code)
        self.assertIsNotNone(balance_info, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
        print(f"   üí≥ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance_info.get('avg_monthly_balance', 0):,.0f} ‚Ç∏")
    
    def test_transfer_analyzer(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        print("üí∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")
        
        if not self.test_client_code:
            self.skipTest("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        analysis = self.transfer_analyzer.analyze_client_transfers(
            self.test_client_code, 90
        )
        
        self.assertIsNotNone(analysis, "–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        self.assertIn('client_code', analysis, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ")
        self.assertIn('total_transfers', analysis, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
        self.assertIn('total_amount', analysis, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—â–∞—è —Å—É–º–º–∞")
        
        print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {self.test_client_code}")
        print(f"   üìä –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {analysis['total_transfers']}")
        print(f"   üí∞ –°—É–º–º–∞: {analysis['total_amount']:,.0f} ‚Ç∏")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        currency_analysis = self.transfer_analyzer.get_currency_analysis(
            self.test_client_code, 90
        )
        self.assertIsNotNone(currency_analysis, "–ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"   üåç –í–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {'–î–∞' if currency_analysis.get('has_currency_operations') else '–ù–µ—Ç'}")
    
    def test_pattern_detector(self):
        """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        
        if not self.test_client_code:
            self.skipTest("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        patterns = self.pattern_detector.detect_client_patterns(
            self.test_client_code, 90
        )
        
        self.assertIsNotNone(patterns, "–î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        self.assertIn('client_code', patterns, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö")
        self.assertIn('client_info', patterns, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ")
        
        print(f"   ‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {self.test_client_code}")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals = self.pattern_detector.generate_client_signals(
            self.test_client_code, 90
        )
        
        self.assertIsNotNone(signals, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        self.assertIsInstance(signals, list, "–°–∏–≥–Ω–∞–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
        
        print(f"   üö¶ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
        for signal in signals:
            print(f"      ‚Ä¢ {signal['description']} (—Å–∏–ª–∞: {signal['strength']})")
    
    def test_analytics_integration(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        print("üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
        
        if not self.test_client_code:
            self.skipTest("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
        print(f"   üìã –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞: {self.test_client_code}")
        
        # 1. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transaction_analysis = self.transaction_analyzer.analyze_client_transactions(
            self.test_client_code, 90
        )
        
        # 2. –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        transfer_analysis = self.transfer_analyzer.analyze_client_transfers(
            self.test_client_code, 90
        )
        
        # 3. –î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        patterns = self.pattern_detector.detect_client_patterns(
            self.test_client_code, 90
        )
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        signals = self.pattern_detector.generate_client_signals(
            self.test_client_code, 90
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
        self.assertIsNotNone(transaction_analysis)
        self.assertIsNotNone(transfer_analysis)
        self.assertIsNotNone(patterns)
        self.assertIsNotNone(signals)
        
        print("   ‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"      ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transaction_analysis['total_transactions']}")
        print(f"      ‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {transfer_analysis['total_transfers']}")
        print(f"      ‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
        
        if patterns.get('client_info'):
            balance = patterns['client_info'].get('avg_monthly_balance_kzt', 0)
            print(f"      ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance:,.0f} ‚Ç∏")


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–ª–æ—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    unittest.main(verbosity=2)
