"""
–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç
"""

import sys
import os
import unittest
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(__file__)), 'src'))

from utils.date_utils import DateUtils
from utils.math_utils import MathUtils


class TestUtils(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —É—Ç–∏–ª–∏—Ç"""
    
    def test_date_utils(self):
        """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏"""
        print("üìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç –¥–ª—è –¥–∞—Ç...")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
        start_date, end_date = DateUtils.get_date_range(30)
        self.assertIsInstance(start_date, datetime)
        self.assertIsInstance(end_date, datetime)
        self.assertLess(start_date, end_date)
        print("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
        test_date = datetime(2024, 1, 15)
        formatted = DateUtils.format_date(test_date)
        self.assertEqual(formatted, "2024-01-15")
        print("   ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
        parsed_date = DateUtils.parse_date("2024-01-15")
        self.assertEqual(parsed_date, test_date)
        print("   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö
        monday = datetime(2024, 1, 15)  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        saturday = datetime(2024, 1, 20)  # –°—É–±–±–æ—Ç–∞
        
        self.assertFalse(DateUtils.is_weekend(monday))
        self.assertTrue(DateUtils.is_weekend(saturday))
        print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—è—á–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        periods = DateUtils.get_month_periods(90)
        self.assertIsInstance(periods, list)
        self.assertGreater(len(periods), 0)
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(periods)} –º–µ—Å—è—á–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤")
        
        # –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        start = datetime(2024, 1, 1)
        end = datetime(2024, 1, 7)
        business_days = DateUtils.get_business_days_count(start, end)
        self.assertGreater(business_days, 0)
        print(f"   ‚úÖ –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ: {business_days}")
    
    def test_math_utils(self):
        """–¢–µ—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É—Ç–∏–ª–∏—Ç"""
        print("üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É—Ç–∏–ª–∏—Ç...")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        percentage = MathUtils.calculate_percentage(25, 100)
        self.assertEqual(percentage, 25.0)
        print("   ‚úÖ –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–º–ø–∞ —Ä–æ—Å—Ç–∞
        growth_rate = MathUtils.calculate_growth_rate(100, 120)
        self.assertEqual(growth_rate, 20.0)
        print("   ‚úÖ –†–∞—Å—á–µ—Ç —Ç–µ–º–ø–∞ —Ä–æ—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ
        values = [1, 2, 3, 4, 5]
        average = MathUtils.calculate_average(values)
        self.assertEqual(average, 3.0)
        print("   ‚úÖ –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–µ–¥–∏–∞–Ω—ã
        median = MathUtils.calculate_median(values)
        self.assertEqual(median, 3.0)
        print("   ‚úÖ –†–∞—Å—á–µ—Ç –º–µ–¥–∏–∞–Ω—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        std_dev = MathUtils.calculate_standard_deviation(values)
        self.assertGreater(std_dev, 0)
        print(f"   ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_dev:.2f}")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è
        percentile_50 = MathUtils.calculate_percentile(values, 50)
        self.assertEqual(percentile_50, 3.0)
        print("   ‚úÖ –†–∞—Å—á–µ—Ç –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        x_values = [1, 2, 3, 4, 5]
        y_values = [2, 4, 6, 8, 10]
        correlation = MathUtils.calculate_correlation(x_values, y_values)
        self.assertAlmostEqual(correlation, 1.0, places=5)
        print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation:.2f}")
        
        # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        increasing_values = [1, 2, 3, 4, 5]
        decreasing_values = [5, 4, 3, 2, 1]
        stable_values = [3, 3, 3, 3, 3]
        
        self.assertEqual(MathUtils.calculate_trend(increasing_values), 'increasing')
        self.assertEqual(MathUtils.calculate_trend(decreasing_values), 'decreasing')
        self.assertEqual(MathUtils.calculate_trend(stable_values), 'stable')
        print("   ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatile_values = [1, 10, 2, 9, 3, 8]
        volatility = MathUtils.calculate_volatility(volatile_values)
        self.assertGreater(volatility, 0)
        print(f"   ‚úÖ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.2f}%")
        
        # –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        normalized = MathUtils.normalize_value(5, 0, 10)
        self.assertEqual(normalized, 0.5)
        print("   ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
        weights = [0.1, 0.2, 0.3, 0.4]
        weighted_avg = MathUtils.calculate_weighted_average(values, weights)
        self.assertGreaterEqual(weighted_avg, 0)
        print(f"   ‚úÖ –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: {weighted_avg:.2f}")
        
        # –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ —Ç–µ–º–ø–∞ —Ä–æ—Å—Ç–∞
        cgr = MathUtils.calculate_compound_growth_rate(100, 121, 2)
        self.assertAlmostEqual(cgr, 10.0, places=1)
        print(f"   ‚úÖ –°–ª–æ–∂–Ω—ã–π —Ç–µ–º–ø —Ä–æ—Å—Ç–∞: {cgr:.2f}%")
        
        # –¢–µ—Å—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        rounded = MathUtils.round_to_nearest(23, 5)
        self.assertEqual(rounded, 25)
        print("   ‚úÖ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É—Ç–∏–ª–∏—Ç...")
    unittest.main(verbosity=2)
