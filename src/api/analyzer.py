"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

from typing import Dict, List, Any
import time
from ..products import (
    TravelCardScenario, PremiumCardScenario, CreditCardScenario,
    CurrencyExchangeScenario, MultiCurrencyDepositScenario,
    SavingsDepositScenario, AccumulationDepositScenario,
    InvestmentsScenario, GoldBarsScenario, CashCreditScenario
)


def analyze_client_with_scenarios(client_code: str, days: int, db_manager) -> List[Dict[str, Any]]:
    """–ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    from ..notifications.scenario_integration import ScenarioIntegration
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ {client_code} –∑–∞ {days} –¥–Ω–µ–π")
    start_time = time.time()
    
    try:
        integration = ScenarioIntegration()
        notifications = []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ScenarioIntegration: {e}")
        return []
    
    try:
        scenarios = {
            'travel_card': TravelCardScenario(),
            'premium_card': PremiumCardScenario(),
            'credit_card': CreditCardScenario(),
            'currency_exchange': CurrencyExchangeScenario(),
            'multi_currency_deposit': MultiCurrencyDepositScenario(),
            'savings_deposit': SavingsDepositScenario(),
            'accumulation_deposit': AccumulationDepositScenario(),
            'investments': InvestmentsScenario(),
            'gold_bars': GoldBarsScenario(),
            'cash_credit': CashCreditScenario()
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        return []
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(scenarios)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
    
    for product_key, scenario in scenarios.items():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç (–º–∞–∫—Å–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥)
            if time.time() - start_time > 15:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å {len(notifications)} –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏")
                break
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            scenario_result = scenario.analyze_client(client_code, days, db_manager)
            client_data = scenario.get_client_data(client_code, days, db_manager)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = integration.generate_notification_from_scenario(
                client_data, scenario_result, scenario.product_name
            )
            
            notification.update({
                'client_code': client_code,
                'product_key': product_key,
                'analysis_score': scenario_result.get('score', 0),
                'expected_benefit': scenario_result.get('expected_benefit', 0)
            })
            
            notifications.append(notification)
            
        except Exception as e:
            print(f"‚ùå {product_key}: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            continue
    
    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(notifications)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —Å–∫–æ—Ä–∏–Ω–≥—É
    try:
        notifications.sort(key=lambda x: (x.get('priority', 'low'), x.get('analysis_score', 0)), reverse=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {e}")
    
    print(f"üèÜ –¢–æ–ø-3: {[n.get('product_name', 'Unknown') for n in notifications[:3]]}")
    
    if not notifications:
        return []
    
    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {time.time() - start_time:.1f}—Å")
    return notifications


def analyze_client_fast(client_code: str, days: int, db_manager) -> List[Dict[str, Any]]:
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ - —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    from ..notifications.scenario_integration import ScenarioIntegration
    
    print(f"üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ {client_code}")
    
    try:
        integration = ScenarioIntegration()
        notifications = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        scenarios = {
            'travel_card': TravelCardScenario(),
            'credit_card': CreditCardScenario(),
            'investments': InvestmentsScenario(),
            'premium_card': PremiumCardScenario(),
            'cash_credit': CashCreditScenario()
        }
        
        for product_key, scenario in scenarios.items():
            try:
                print(f"üîç {product_key}...", end=" ")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                scenario_result = scenario.analyze_client(client_code, days, db_manager)
                client_data = scenario.get_client_data(client_code, days, db_manager)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                notification = integration.generate_notification_from_scenario(
                    client_data, scenario_result, scenario.product_name
                )
                
                notification.update({
                    'client_code': client_code,
                    'product_key': product_key,
                    'analysis_score': scenario_result.get('score', 0),
                    'expected_benefit': scenario_result.get('expected_benefit', 0)
                })
                
                notifications.append(notification)
                print(f"‚úÖ")
                
            except Exception as e:
                print(f"‚ùå {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä–∏–Ω–≥—É
        notifications.sort(key=lambda x: x.get('analysis_score', 0), reverse=True)
        
        print(f"üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return notifications
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return []
