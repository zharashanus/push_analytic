"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é –ë–î)
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Any, Optional


class BaseProductScenario(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.product_name = ""
        self.category = ""
        self.description = ""
        self.target_audience = ""
        self.conditions = {}
        self.benefits = {}
    
    @abstractmethod
    def analyze_client(self, client_code: str, days: int, db_manager) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç—É
        
        Args:
            client_code: –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
            days: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å —Å–∫–æ—Ä–æ–º –∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏
        """
        pass
    
    def get_client_data(self, client_code: str, days: int, db_manager) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        print(f"üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ {client_code} –∑–∞ {days} –¥–Ω–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        client_info = db_manager.get_client_by_code(client_code)
        print(f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ: {bool(client_info)}")
        if not client_info:
            print("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return {}
        
        print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_info.get('name', 'Unknown')}, –±–∞–ª–∞–Ω—Å: {client_info.get('avg_monthly_balance_KZT', 0)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions = self._get_transactions_period(client_code, days, db_manager)
        print(f"üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {len(transactions)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        transfers = self._get_transfers_period(client_code, days, db_manager)
        print(f"üí∏ –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(transfers)}")
        
        return {
            'client_info': client_info,
            'transactions': transactions,
            'transfers': transfers,
            'period_days': days
        }
    
    def _get_transactions_period(self, client_code: str, days: int, db_manager) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        query = """
        SELECT t.*, c.name as client_name
        FROM "Transactions" t
        JOIN "Clients" c ON t.client_code = c.client_code
        WHERE t.client_code = %s
        AND t.date >= CURRENT_DATE - INTERVAL '%s days'
        ORDER BY t.date DESC
        """
        
        try:
            result = db_manager.execute_query(query, (client_code, days))
            return result if result else []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
            return []
    
    def _get_transfers_period(self, client_code: str, days: int, db_manager) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        query = """
        SELECT tr.*, c.name as client_name
        FROM "Transfers" tr
        JOIN "Clients" c ON tr.client_code = c.client_code
        WHERE tr.client_code = %s
        AND tr.date >= CURRENT_DATE - INTERVAL '%s days'
        ORDER BY tr.date DESC
        """
        
        try:
            result = db_manager.execute_query(query, (client_code, days))
            return result if result else []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {e}")
            return []
    
    def calculate_basic_score(self, client_data: Dict) -> float:
        """–ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É –∫–ª–∏–µ–Ω—Ç–∞"""
        client_info = client_data.get('client_info', {})
        avg_balance = float(client_info.get('avg_monthly_balance_KZT', 0))
        
        if avg_balance < 100000:  # –ú–µ–Ω–µ–µ 100 —Ç—ã—Å
            return 0.1
        elif avg_balance < 500000:  # 100-500 —Ç—ã—Å
            return 0.3
        elif avg_balance < 1000000:  # 500 —Ç—ã—Å - 1 –º–ª–Ω
            return 0.6
        elif avg_balance < 3000000:  # 1-3 –º–ª–Ω
            return 0.8
        else:  # –ë–æ–ª–µ–µ 3 –º–ª–Ω
            return 1.0
    
    def calculate_expected_benefit(self, client_data: Dict, score: float) -> float:
        """–†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –≤—ã–≥–æ–¥—ã –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞"""
        client_info = client_data.get('client_info', {})
        avg_balance = float(client_info.get('avg_monthly_balance_KZT', 0))
        
        # –ë–∞–∑–æ–≤–∞—è –≤—ã–≥–æ–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–∫–æ—Ä–∞
        base_benefit = avg_balance * 0.02 * score  # 2% –æ—Ç –±–∞–ª–∞–Ω—Å–∞, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Å–∫–æ—Ä
        
        return round(base_benefit, 2)
    
    def format_analysis_result(self, score: float, reasons: List[str], expected_benefit: float) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        return {
            'score': score,
            'reasons': reasons,
            'expected_benefit': expected_benefit,
            'match_score': {
                'score': score,
                'reasons': reasons
            }
        }
    
    def analyze_spending_patterns(self, transactions: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç—Ä–∞—Ç"""
        if not transactions:
            return {}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_spending = {}
        total_amount = 0
        
        for transaction in transactions:
            amount = float(transaction.get('amount', 0))
            category = transaction.get('category', '')
            
            total_amount += amount
            
            if category not in category_spending:
                category_spending[category] = 0
            category_spending[category] += amount
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ —Ç—Ä–∞—Ç
        top_categories = sorted(category_spending.items(), key=lambda x: x[1], reverse=True)
        
        return {
            'total_amount': total_amount,
            'category_spending': category_spending,
            'top_categories': top_categories[:5],  # –¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            'category_count': len(category_spending)
        }
    
    def analyze_transfer_patterns(self, transfers: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        if not transfers:
            return {}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        type_transfers = {}
        total_in = 0
        total_out = 0
        
        for transfer in transfers:
            amount = float(transfer.get('amount', 0))
            transfer_type = transfer.get('type', '')
            direction = transfer.get('direction', '')
            
            if direction == 'in':
                total_in += amount
            elif direction == 'out':
                total_out += amount
            
            if transfer_type not in type_transfers:
                type_transfers[transfer_type] = {'in': 0, 'out': 0}
            type_transfers[transfer_type][direction] += amount
        
        return {
            'total_in': total_in,
            'total_out': total_out,
            'net_flow': total_in - total_out,
            'type_transfers': type_transfers,
            'transfer_count': len(transfers)
        }
    
    def get_client_demographics(self, client_info: Dict) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        return {
            'status': client_info.get('status', ''),
            'city': client_info.get('city', ''),
            'avg_balance': client_info.get('avg_monthly_balance_KZT', 0)
        }
