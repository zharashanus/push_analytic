"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

from typing import Dict, List, Any, Optional
from datetime import datetime
from .notification_ai import NotificationAI
from .message_templates import MessageTemplates


class ScenarioIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.ai = NotificationAI()
        self.templates = MessageTemplates()
    
    def generate_notification_from_scenario(self, client_data: Dict, 
                                          scenario_result: Dict, 
                                          product_name: str) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        
        Args:
            client_data: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            scenario_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
            product_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        
        Returns:
            –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        print(f"üí¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name}")
        
        client_info = client_data.get('client_info', {})
        client_name = client_info.get('name', '–ö–ª–∏–µ–Ω—Ç')
        print(f"üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {client_name}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
        score = scenario_result.get('score', 0)
        reasons = scenario_result.get('reasons', [])
        expected_benefit = scenario_result.get('expected_benefit', 0)
        print(f"üìä –°–∫–æ—Ä: {score}, –ø—Ä–∏—á–∏–Ω—ã: {len(reasons)}, –≤—ã–≥–æ–¥–∞: {expected_benefit}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞
        product_type = self._map_product_to_type(product_name)
        print(f"üè∑Ô∏è –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: {product_type}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._generate_personalized_message(
            client_name, product_type, client_data, 
            scenario_result, expected_benefit
        )
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {message[:50]}...")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        validated_message = self._validate_message(message)
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ: {len(validated_message)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return {
            'message': validated_message,
            'product_type': product_type,
            'product_name': product_name,
            'client_name': client_name,
            'score': score,
            'expected_benefit': expected_benefit,
            'reasons': reasons,
            'length': len(validated_message),
            'priority': self._calculate_priority(score, expected_benefit),
            'channels': self._get_recommended_channels(client_info),
            'personalization': self._get_personalization_level(reasons)
        }
    
    def _map_product_to_type(self, product_name: str) -> str:
        """–ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Ç–∏–ø —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        mapping = {
            # üí≥ –ö–∞—Ä—Ç—ã
            '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π': 'travel_card',
            '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞': 'premium_card',
            '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞': 'credit_card',
            '–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞': 'multi_currency_card',
            
            # üí∞ –í–∫–ª–∞–¥—ã –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
            '–î–µ–ø–æ–∑–∏—Ç –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π': 'savings_deposit',
            '–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π': 'accumulation_deposit',
            '–î–µ–ø–æ–∑–∏—Ç –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π': 'multi_currency_deposit',
            
            # üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
            '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': 'investments',
            '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–±–∞–ª–∞–Ω—Å)': 'investments_balance',
            '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–æ)': 'investments_simple',
            
            # üåç –í–∞–ª—é—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
            '–û–±–º–µ–Ω –≤–∞–ª—é—Ç': 'currency_exchange',
            '–í–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è)': 'currency_travel',
            '–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π —Å—á—ë—Ç': 'multi_currency_account',
            
            # üè¶ –ö—Ä–µ–¥–∏—Ç—ã
            '–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏': 'cash_credit',
            '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ (—Ä–∞—Å—Å—Ä–æ—á–∫–∞)': 'credit_card_installment',
            '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç': 'personal_credit',
            
            # üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
            '–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã': 'delivery_food',
            '–ü–æ–¥–ø–∏—Å–∫–∏': 'subscriptions',
            '–ë–∞–Ω–∫–æ–º–∞—Ç—ã': 'atm_withdrawals',
            '–¢–∞–∫—Å–∏ –∏ –∫–∞—Ä—à–µ—Ä–∏–Ω–≥': 'taxi_carsharing',
            '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫': 'monthly_balance',
            
            # –°—Ç–∞—Ä—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            '–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏': 'gold_bars'
        }
        return mapping.get(product_name, 'generic')
    
    def _generate_personalized_message(self, client_name: str, product_type: str,
                                     client_data: Dict, scenario_result: Dict,
                                     expected_benefit: float) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
        template = self.templates.get_template(product_type, with_amount=True)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = self._prepare_context(client_name, product_type, client_data, 
                                      scenario_result, expected_benefit)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        try:
            message = template.format(**context)
        except KeyError as e:
            # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            template = self.templates.get_template(product_type, with_amount=False)
            context = self._prepare_basic_context(client_name, product_type)
            message = template.format(**context)
        
        return message
    
    def _prepare_context(self, client_name: str, product_type: str,
                        client_data: Dict, scenario_result: Dict,
                        expected_benefit: float) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        context = {
            'name': client_name,
            'month': self.templates.format_date(datetime.now())
        }
        
        client_info = client_data.get('client_info', {})
        avg_balance = float(client_info.get('avg_monthly_balance_KZT', 0))
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        if product_type == 'travel_card':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ travel_data –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(scenario_result, 'travel_data') and scenario_result.travel_data:
                travel_data = scenario_result.travel_data
                context['trip_count'] = travel_data.get('trip_count', 5)
                context['amount'] = self.templates.format_amount(travel_data.get('travel_amount', 0))
                context['cashback'] = self.templates.format_amount(travel_data.get('potential_cashback', 0))
            else:
                context['trip_count'] = 5
                context['amount'] = self.templates.format_amount(50000)
                context['cashback'] = self.templates.format_amount(2000)
        
        elif product_type == 'premium_card':
            context['balance'] = self.templates.format_amount(avg_balance)
            context['cashback'] = self.templates.format_amount(avg_balance * 0.02)
        
        elif product_type == 'credit_card':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ online_spending_data –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(scenario_result, 'online_spending_data') and scenario_result.online_spending_data:
                online_data = scenario_result.online_spending_data
                context['cat1'] = '–æ–Ω–ª–∞–π–Ω-–ø–æ–∫—É–ø–∫–∏'
                context['cat2'] = '–¥–æ—Å—Ç–∞–≤–∫–∞'
                context['cat3'] = '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'
                context['percent'] = 10
                context['amount'] = self.templates.format_amount(online_data.get('online_amount', 0))
                context['cashback'] = self.templates.format_amount(online_data.get('potential_cashback', 0))
            else:
                context['cat1'] = '–æ–Ω–ª–∞–π–Ω-–ø–æ–∫—É–ø–∫–∏'
                context['cat2'] = '–¥–æ—Å—Ç–∞–≤–∫–∞'
                context['cat3'] = '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'
                context['percent'] = 10
                context['amount'] = self.templates.format_amount(30000)
                context['cashback'] = self.templates.format_amount(3000)
        
        elif product_type == 'multi_currency_card':
            context['fx_curr'] = 'USD'
            context['fx_rate'] = '450'
        
        elif product_type in ['multi_currency_deposit', 'savings_deposit', 'accumulation_deposit']:
            context['balance'] = self.templates.format_amount(avg_balance)
            context['months'] = 3
            context['min_balance'] = self.templates.format_amount(avg_balance * 0.5)
            context['period'] = '–º–µ—Å—è—Ü'
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º expected_benefit –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
            context['profit'] = self.templates.format_amount(expected_benefit)
            context['interest'] = self.templates.format_amount(expected_benefit / 12)  # –ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥
        
        elif product_type in ['investments', 'investments_balance', 'investments_simple']:
            context['amount'] = self.templates.format_amount(10000)
            context['balance'] = self.templates.format_amount(avg_balance)
        
        elif product_type == 'currency_exchange':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fx_data –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(scenario_result, 'fx_data') and scenario_result.fx_data:
                fx_data = scenario_result.fx_data
                context['fx_curr'] = 'USD'
                context['fx_rate'] = '450'
                context['amount'] = self.templates.format_amount(fx_data.get('fx_amount', 0))
                context['savings'] = self.templates.format_amount(fx_data.get('potential_savings', 0))
            else:
                context['fx_curr'] = 'USD'
                context['fx_rate'] = '450'
                context['amount'] = self.templates.format_amount(100000)
                context['savings'] = self.templates.format_amount(5000)
        
        elif product_type == 'currency_travel':
            context['country'] = '–¢—É—Ä—Ü–∏—è'
            context['fx_curr'] = 'USD'
            context['fx_rate'] = '450'
        
        elif product_type == 'multi_currency_account':
            context['main_curr'] = 'KZT'
            context['fx_curr'] = 'USD'
        
        elif product_type == 'cash_credit':
            context['limit'] = self.templates.format_amount(2000000)
            context['terms'] = '–¥–æ 24 –º–µ—Å—è—Ü–µ–≤'
            context['amount'] = self.templates.format_amount(500000)
            context['purchase_item'] = '—Ç–µ—Ö–Ω–∏–∫—É'
        
        elif product_type == 'credit_card_installment':
            context['grace_period'] = 55
        
        elif product_type == 'personal_credit':
            context['income'] = self.templates.format_amount(avg_balance * 2)
            context['amount'] = self.templates.format_amount(1000000)
        
        elif product_type == 'delivery_food':
            context['percent'] = 25
            context['amount'] = self.templates.format_amount(15000)
            context['cashback'] = self.templates.format_amount(1500)
        
        elif product_type == 'subscriptions':
            context['subscriptions_count'] = 3
            context['sub1'] = 'Netflix'
            context['sub2'] = 'Spotify'
            context['sub3'] = 'YouTube Premium'
            context['percent'] = 5
        
        elif product_type == 'atm_withdrawals':
            context['amount'] = self.templates.format_amount(50000)
        
        elif product_type == 'taxi_carsharing':
            context['amount'] = self.templates.format_amount(25000)
            context['cashback'] = self.templates.format_amount(1250)
        
        elif product_type == 'monthly_balance':
            context['balance'] = self.templates.format_amount(avg_balance)
            context['interest'] = self.templates.format_amount(avg_balance * 0.01)  # 1% –≤ –º–µ—Å—è—Ü
        
        return context
    
    def _prepare_basic_context(self, client_name: str, product_type: str) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return {
            'name': client_name,
            'month': self.templates.format_date(datetime.now()),
            'amount': '50 000 ‚Ç∏',
            'cashback': '2 000 ‚Ç∏',
            'balance': '1 000 000 ‚Ç∏',
            'profit': '150 000 ‚Ç∏'
        }
    
    def _validate_message(self, message: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ TOV"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (180-220 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—É—à–µ–π)
        if len(message) > 220:
            message = message[:217] + '...'
        elif len(message) < 50:
            message = message + ' –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?'
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ (–º–∞–∫—Å–∏–º—É–º 1)
        exclamation_count = message.count('!')
        if exclamation_count > 1:
            message = message.replace('!', '', exclamation_count - 1)
        
        # –£–±–∏—Ä–∞–µ–º –ö–ê–ü–°
        if message.isupper():
            message = message.capitalize()
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        message = ' '.join(message.split())
        
        return message
    
    def _calculate_priority(self, score: float, expected_benefit: float) -> str:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if score > 0.8 and expected_benefit > 100000:
            return 'high'
        elif score > 0.5 and expected_benefit > 50000:
            return 'medium'
        else:
            return 'low'
    
    def _get_recommended_channels(self, client_info: Dict) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        channels = ['push']
        status = client_info.get('status', '').lower()
        
        if '–ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π' in status:
            channels.extend(['email', 'sms'])
        elif '–∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–π' in status:
            channels.append('sms')
        
        return channels
    
    def _get_personalization_level(self, reasons: List[str]) -> str:
        """–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if len(reasons) >= 3:
            return 'high'
        elif len(reasons) >= 2:
            return 'medium'
        else:
            return 'low'
