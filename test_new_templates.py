#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from notifications.message_templates import MessageTemplates
from notifications.scenario_integration import ScenarioIntegration
from datetime import datetime

def test_new_templates():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("=" * 50)
    
    templates = MessageTemplates()
    integration = ScenarioIntegration()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_data = {
        'client_info': {
            'name': '–ê–π–¥–∞—Ä',
            'status': '–∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–π',
            'avg_monthly_balance_KZT': 1500000
        }
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    scenario_results = [
        {
            'product_name': '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π',
            'score': 0.85,
            'expected_benefit': 5000,
            'reasons': ['–ú–Ω–æ–≥–æ –ø–æ–µ–∑–¥–æ–∫ –Ω–∞ —Ç–∞–∫—Å–∏', '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'],
            'travel_data': {
                'trip_count': 12,
                'travel_amount': 45000,
                'potential_cashback': 2250
            }
        },
        {
            'product_name': '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞',
            'score': 0.75,
            'expected_benefit': 30000,
            'reasons': ['–ö—Ä—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫', '–¢—Ä–∞—Ç—ã –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö']
        },
        {
            'product_name': '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞',
            'score': 0.65,
            'expected_benefit': 8000,
            'reasons': ['–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-–ø–æ–∫—É–ø–∫–∏', '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã']
        },
        {
            'product_name': '–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã',
            'score': 0.70,
            'expected_benefit': 1500,
            'reasons': ['–†–æ—Å—Ç —Ç—Ä–∞—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É', '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã']
        },
        {
            'product_name': '–ü–æ–¥–ø–∏—Å–∫–∏',
            'score': 0.60,
            'expected_benefit': 2000,
            'reasons': ['–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏', '–û–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã']
        }
    ]
    
    print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_data['client_info']['name']}")
    print(f"üí∞ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {templates.format_amount(client_data['client_info']['avg_monthly_balance_KZT'])}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω
    for i, scenario_result in enumerate(scenario_results, 1):
        print(f"üìù –¢–µ—Å—Ç {i}: {scenario_result['product_name']}")
        print("-" * 30)
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = integration.generate_notification_from_scenario(
                client_data, scenario_result, scenario_result['product_name']
            )
            
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ: {notification['message']}")
            print(f"üìä –î–ª–∏–Ω–∞: {notification['length']} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {notification['priority']}")
            print(f"üì± –ö–∞–Ω–∞–ª—ã: {', '.join(notification['channels'])}")
            print(f"üé® –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: {notification['personalization']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TOV —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            message = notification['message']
            issues = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
            if len(message) < 50 or len(message) > 220:
                issues.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {len(message)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ê–ü–°
            if message.isupper():
                issues.append("–ï—Å—Ç—å –ö–ê–ü–°")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
            if message.count('!') > 1:
                issues.append("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
            if '‚Ç∏' in message and ' ‚Ç∏' not in message:
                issues.append("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã")
            
            if issues:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(issues)}")
            else:
                print("‚úÖ TOV —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
    
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º")
    print("-" * 30)
    
    test_amounts = [1000, 50000, 1500000, 5000000]
    for amount in test_amounts:
        formatted = templates.format_amount(amount)
        print(f"{amount:>10} ‚Üí {formatted}")
    
    print()
    print("üìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç")
    print("-" * 30)
    
    test_date = datetime.now()
    formatted_date = templates.format_date(test_date)
    print(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {formatted_date}")
    
    print()
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_new_templates()
